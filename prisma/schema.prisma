generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  firstName              String?
  middleName             String?
  lastName               String?
  username               String?                   @unique
  email                  String?                   @unique
  phoneNumber            String?                   @unique
  hashedPassword         String?
  profilePictureUrl      String?
  bio                    String?
  location               String?
  totalLikes             Int                      @default(0)
  achievements           Json?
  followers              Int                      @default(0)
  following              Int                      @default(0)
  isVerified             Boolean                  @default(false)
  authProvider           String?
  authProviderId         String?                  @unique
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  lastLogin              DateTime?
  refreshToken           String?
  googleId               String?                  @unique
  clips                  Clip[]
  Collection             Collection[]
  Comment                Comment[]
  emailVerificationToken EmailVerificationToken[]
  oAuthToken             OAuthToken[]
  posts                  Post[]
  like                   Like[]
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

model OAuthToken {
  id           String    @id @default(cuid())
  userId       String
  provider     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id])
}

model Clip {
  id             String           @id @default(cuid())
  userId         String
  title          String?
  videoUrl       String
  views          Int              @default(0)
  likes          Int              @default(0)
  saves          Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation(fields: [userId], references: [id])
  CollectionClip CollectionClip[]
  comments       Comment[]
}

model Post {
  id             String           @id @default(cuid())
  userId         String
  title          String
  description    String?
  mediaUrl       String           @unique
  location       String?
  tags           String[]
  likes          Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  CollectionPost CollectionPost[]
  Comment        Comment[]
  user           User             @relation(fields: [userId], references: [id])
  like           Like[]
}

model Collection {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String?
  public      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  clips       CollectionClip[]
  posts       CollectionPost[]
}

model CollectionPost {
  id           String     @id @default(cuid())
  collectionId String
  postId       String
  createdAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id])
  post         Post       @relation(fields: [postId], references: [id])
}

model CollectionClip {
  id           String     @id @default(cuid())
  collectionId String
  clipId       String
  createdAt    DateTime   @default(now())
  clip         Clip       @relation(fields: [clipId], references: [id])
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  clipId    String?
  clip      Clip?    @relation(fields: [clipId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PendingUser {
  id        String   @id @default(uuid())
  email     String?   @unique
  phoneNumber String? @unique
  hashedPassword  String
  verificationToken  Int?
  createdAt DateTime @default(now())
  expiresAt DateTime?
  attempts Int? @default(0) // Tracks the number of input attempts; max: 5 until timeout
  timeoutForAttempts DateTime? // Put user in a timeout for too many input attempts or too many tokens sent
  timeoutForToken DateTime?
  numberOfTimeoutsForAttempts Int? @default(0) // Track the number of timeouts. Increase lockout time for subsequent number of timeouts
  numberOfTimeoutsForTokens Int? @default(0) // Track the number of timeouts. Increase lockout time for subsequent number of timeouts
  amountOfVerificationTokensSent Int? @default(0) // Tracks the number of tokens sent to user; max: 3 until timeout
}

model Like {
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}
